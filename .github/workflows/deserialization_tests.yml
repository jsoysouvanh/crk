name: Deserialization Tests

on:
  push:
    branches:
      - master
      - dev
  workflow_dispatch:

jobs:
  #This initial job waits for all other archive upload workflows to complete
  wait_for_archives_upload:
    name: Wait for archives upload
    runs-on: ubuntu-latest

    steps:
      - name: Wait for MacOS archives
        uses: lewagon/wait-on-check-action@v1.0.0
        with:
          ref: ${{ github.ref }}
          running-workflow-name: 'MacOS'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      #- name: Wait for Windows archives
      #  uses: lewagon/wait-on-check-action@v1.0.0
      #  with:
      #    ref: ${{ github.ref }}
      #    running-workflow-name: 'Windows'
      #    repo-token: ${{ secrets.GITHUB_TOKEN }}

      #- name: Wait for Linux archives
      #  uses: lewagon/wait-on-check-action@v1.0.0
      #  with:
      #    ref: ${{ github.ref }}
      #    running-workflow-name: 'Linux'
      #    repo-token: ${{ secrets.GITHUB_TOKEN }}

  ubuntu_clang:
    name: Ubuntu | Clang
    runs-on: ubuntu-latest
    needs: wait_for_archives_upload

    strategy:
      fail-fast: false
      matrix:
        build_config: [Release, Debug]
        clang_version: [12]
        cpp_version: [20]

    env:
      clang_compiler_version: -${{ matrix.clang_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      #- name: Install suitable compiler
      #  run: sudo apt-get install clang++-${{ matrix.clang_version }}

      #- name: Install ninja
      #  uses: seanmiddleditch/gha-setup-ninja@master

      #- name: Install CMake
      #  uses: jwlawson/actions-setup-cmake@v1.8
      #  with:
      #    cmake-version: '3.21.0'
          
      #- name: Generate Project
      #  run: |
      #    cmake --list-presets=all
      #    cmake --preset="Clang" -DCRK_MIN_CXX_STD_VERSION=${{ matrix.cpp_version }} -DCRK_DEV=1 -DCRK_TESTS_OUTPUT_DIR="${PWD}/TestsOutput"

      #- name: Build crk
      #  run: cmake --build --preset="Clang ${{ matrix.build_config }}" --target crkReadFromArchiveTests

      - name: Download artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: tests_macos.yml
          workflow_conclusion: success
          # Optional, directory where to extract artifact(s), defaults to current directory
          # path: extract_here

      - name: Install Tree
        run: sudo apt-get install tree

      - name: Print folders content
        run: tree

      #- name: Run Tests
      #  run: ctest --preset="Clang ${build_config}" -R crkReadFromArchiveTests
        